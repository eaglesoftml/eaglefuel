#-*- coding: utf-8 -*-from odoo import models, fields, apifrom odoo.exceptions import ValidationErrorclass releveindex(models.Model):    _name = "eaglefuel.releveindex"    _description = "releveindex"    ref = fields.Char("Reference", default="New")    nom = fields.Char("Nom")    index_matin = fields.Integer("Index depart", required=True)    index_soir = fields.Integer("Index arrive", required=True)    litrage = fields.Float("Litrage", compute="litrage_vendu")    carburant = fields.Char(compute="nom_carb")    date_releve = fields.Date("Date du releve", required=True)    compteur_id = fields.Many2one("eaglefuel.compteur", string="Compteur id")    servicepompiste_id = fields.Many2one("eaglefuel.servicepompiste", string="service pompiste id")    @api.constrains('index_matin','index_soir')    def check_litres(self):        """Ensure that litres sold in a day are not negative for select type of form"""        for rec in self:            if rec.index_matin > rec.index_soir:                raise ValidationError("L'index d'arrive doit etre superieur a l'index de depart")            else:                return 1    def litrage_vendu(self):        for line in self:            line.litrage = line.index_soir - line.index_matin    def name_get(self):        result = []        for releveindex in self:            name = str("[") + str(releveindex.compteur_id.pistole_id.pompe_id.station_id.name) +str("] ") + str("/") + str(releveindex.compteur_id.pistole_id.pompe_id) + str(releveindex.compteur_id.pistole_id) + str(releveindex.compteur_id) + str(releveindex.ref)            result.append((releveindex.id, name))        return result    def nom_carb(self):        for line in self:            if line.compteur_id.pistole_id.produit_servi == "e":                line.carburant = "Essence"            else:                line.carburant = "Gasoile"    @api.model    def create(self, values):        res = super(releveindex, self).create(values)        res.write({ref: f'{station_id}/{res.id}'})        return res    @api.model    def create(self, values):        values['ref'] = self.env['ir.sequence'].next_by_code('seq.releveindex.ref') or _('New')        return super(releveindex, self).create(values)